// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace MyTitle.Samples
{
    public partial class Samples_WorkflowClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_ShortVersion()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_ShortVersion_Async()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                scopeId = "<scopeId>",
                name = "<name>",
                connectors = new object[]
            {
new
{
type = "0",
direction = "0",
id = "<id>",
name = "<name>",
parentId = "<parentId>",
}
            },
                connections = new object[]
            {
new
{
parentId = "<parentId>",
sourceId = "<sourceId>",
targetId = "<targetId>",
}
            },
                nodes = new object[]
            {
new
{
position = new
{
isEmpty = true,
x = 1234,
y = 1234,
},
}
            },
            });
            Response response = client.Create(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                scopeId = "<scopeId>",
                name = "<name>",
                connectors = new object[]
            {
new
{
type = "0",
direction = "0",
id = "<id>",
name = "<name>",
parentId = "<parentId>",
}
            },
                connections = new object[]
            {
new
{
parentId = "<parentId>",
sourceId = "<sourceId>",
targetId = "<targetId>",
}
            },
                nodes = new object[]
            {
new
{
position = new
{
isEmpty = true,
x = 1234,
y = 1234,
},
}
            },
            });
            Response response = await client.CreateAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetById_ShortVersion()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = client.GetById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetById_ShortVersion_Async()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = await client.GetByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetById_AllParameters()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = client.GetById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scopeId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("direction").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("targetId").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("isEmpty").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetById_AllParameters_Async()
        {
            WorkflowClient client = new WorkflowClient();

            Response response = await client.GetByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scopeId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("direction").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("connectors")[0].GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("connections")[0].GetProperty("targetId").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("isEmpty").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("nodes")[0].GetProperty("position").GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                scopeId = "<scopeId>",
                name = "<name>",
                connectors = new object[]
            {
new
{
type = "0",
direction = "0",
id = "<id>",
name = "<name>",
parentId = "<parentId>",
}
            },
                connections = new object[]
            {
new
{
parentId = "<parentId>",
sourceId = "<sourceId>",
targetId = "<targetId>",
}
            },
                nodes = new object[]
            {
new
{
position = new
{
isEmpty = true,
x = 1234,
y = 1234,
},
}
            },
            });
            Response response = client.Update("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            WorkflowClient client = new WorkflowClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                scopeId = "<scopeId>",
                name = "<name>",
                connectors = new object[]
            {
new
{
type = "0",
direction = "0",
id = "<id>",
name = "<name>",
parentId = "<parentId>",
}
            },
                connections = new object[]
            {
new
{
parentId = "<parentId>",
sourceId = "<sourceId>",
targetId = "<targetId>",
}
            },
                nodes = new object[]
            {
new
{
position = new
{
isEmpty = true,
x = 1234,
y = 1234,
},
}
            },
            });
            Response response = await client.UpdateAsync("<id>", content);

            Console.WriteLine(response.Status);
        }
    }
}
