// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace MyTitle.Samples
{
    public partial class Samples_ScopeClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRoot_ShortVersion()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.GetRoot(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRoot_ShortVersion_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.GetRootAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRoot_AllParameters()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.GetRoot(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parent").ToString());
            Console.WriteLine(result.GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRoot_AllParameters_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.GetRootAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parent").ToString());
            Console.WriteLine(result.GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_ShortVersion()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_ShortVersion_Async()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                parentId = "<parentId>",
                name = "<name>",
                parent = new object(),
                context = new
                {
                    key = "<context>",
                },
                childrens = new object[]
            {
new
{
id = "<id>",
name = "<name>",
}
            },
            });
            Response response = client.Create(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                parentId = "<parentId>",
                name = "<name>",
                parent = new object(),
                context = new
                {
                    key = "<context>",
                },
                childrens = new object[]
            {
new
{
id = "<id>",
name = "<name>",
}
            },
            });
            Response response = await client.CreateAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetById_ShortVersion()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.GetById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetById_ShortVersion_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.GetByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetById_AllParameters()
        {
            ScopeClient client = new ScopeClient();

            Response response = client.GetById("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parent").ToString());
            Console.WriteLine(result.GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetById_AllParameters_Async()
        {
            ScopeClient client = new ScopeClient();

            Response response = await client.GetByIdAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parent").ToString());
            Console.WriteLine(result.GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("childrens")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                parentId = "<parentId>",
                name = "<name>",
                parent = new object(),
                context = new
                {
                    key = "<context>",
                },
                childrens = new object[]
            {
new
{
id = "<id>",
name = "<name>",
}
            },
            });
            Response response = client.Update("<id>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            ScopeClient client = new ScopeClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                parentId = "<parentId>",
                name = "<name>",
                parent = new object(),
                context = new
                {
                    key = "<context>",
                },
                childrens = new object[]
            {
new
{
id = "<id>",
name = "<name>",
}
            },
            });
            Response response = await client.UpdateAsync("<id>", content);

            Console.WriteLine(response.Status);
        }
    }
}
