using System.ComponentModel;
using System.Text.Json.Serialization;
using System.Windows;

namespace Automation.Shared.ViewModels
{
    [JsonDerivedType(typeof(NodeGroup), typeDiscriminator: "group")]
    [JsonDerivedType(typeof(TaskNode), typeDiscriminator: "task")]
    [JsonDerivedType(typeof(WorkflowNode), typeDiscriminator: "workflow")]
    [JsonDerivedType(typeof(WorkflowInputNode), typeDiscriminator: "workflow-input")]
    [JsonDerivedType(typeof(WorkflowOutputNode), typeDiscriminator: "workflow-output")]
    public interface INode
    {
        // XXX : Guid.NewGuid() not good, should be generated by the database
        public Guid Id { get; set; }
        public string Name { get; }
        public Point Location { get; set; }
    }

    // XXX : That would be not stored in the same table as TaskNode, group them later for the viewmodel ? (if yes, do the same for scope ?)
    public class NodeGroup : INode
    {
        public Size Size { get; set; }
        public Guid Id { get; set; }
        public string Name { get; set; }
        public Point Location { get; set; }
    }

    public enum EnumNodeConnectorType
    {
        Data,
        Flow
    }

    public class TaskNode : INode
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        // Parent scope name ?
        public string Name { get; set; }
        public Point Location { get; set; }

        [JsonIgnore]
        public ScopedTask ParentScope { get; set; }

        [JsonIgnore]
        public List<NodeConnector> Inputs { get; set; } = [];
        [JsonIgnore]
        public List<NodeConnector> Outputs { get; set; } = [];

        public void AddInput(NodeConnector input)
        {
            input.Parent = this;
            Inputs.Add(input);
        }

        public void AddOutput(NodeConnector output)
        {
            output.Parent = this;
            Outputs.Add(output);
        }
    }

    [JsonDerivedType(typeof(NodeInput), typeDiscriminator: "input")]
    [JsonDerivedType(typeof(NodeOutput), typeDiscriminator: "output")]
    public class NodeConnector : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        public EnumNodeConnectorType Type { get; set; } = EnumNodeConnectorType.Data;

        public Guid Id { get; set; } = Guid.NewGuid();
        public string Name { get; set; }
        public Guid ParentId { get; set; }

        [JsonIgnore]
        public bool IsConnected { get; set; }
        [JsonIgnore]
        public Point Anchor { get; set; }
        [JsonIgnore]
        public INode Parent { get; set; }
    }

    public class NodeInput : NodeConnector
    { }
    public class NodeOutput : NodeConnector
    { }

    public partial class NodeConnection
    {
        public Guid ParentId { get; set; }
        public Guid SourceId { get; set; }
        public Guid TargetId { get; set; }

        [JsonIgnore]
        public WorkflowNode ParentWorkflow { get; set; }
        [JsonIgnore]
        public NodeConnector Source { get; set; }
        [JsonIgnore]
        public NodeConnector Target { get; set; }

        // Deserialization
        public NodeConnection() { }

        public NodeConnection(WorkflowNode parent, NodeConnector source, NodeConnector target)
        {
            ParentId = parent.Id;
            SourceId = source.Id;
            TargetId = target.Id;

            ParentWorkflow = parent;
            Source = source;
            Target = target;

            source.IsConnected = true;
            target.IsConnected = true;
        }
    }
}
